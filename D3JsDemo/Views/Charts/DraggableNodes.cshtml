@{
    ViewBag.Title = "DraggableNodes";
}

@*ref : http://bl.ocks.org/mbostock/1153292*@

<body>
    <div id="chart"></div>
    <style>
        .link {
            fill: none;
            stroke: #666;
            stroke-width: 1.5px;
        }

        #licensing {
            fill: green;
        }

        .link.licensing {
            stroke: green;
        }

        .link.resolved {
            stroke-dasharray: 0,2 1;
        }

        circle {
            fill: #ccc;
            stroke: #333;
            stroke-width: 1.5px;
        }

        text {
            font: 10px sans-serif;
            pointer-events: none;
            text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
        }
    </style>

    <script>
        var links = [
          { source: "Woohoo", target: "Prashanth", type: "teamMates" },
          { source: "Woohoo", target: "Karthi", type: "teamMates" },
          { source: "Woohoo", target: "Bhupendra", type: "teamMates" },
          { source: "Woohoo", target: "Ashish", type: "teamMates" },
          { source: "Woohoo", target: "Prem", type: "teamMates" },
          { source: "Woohoo", target: "Ravi", type: "teamMates" },


          { source: "IOT POC", target: "Abhishek", type: "teamMates" },
          { source: "IOT POC", target: "Suganya", type: "teamMates" },
          { source: "IOT POC", target: "Sangram", type: "teamMates" },
          { source: "IOT POC", target: "Karthi", type: "teamMates" },
          { source: "IOT POC", target: "Kamal", type: "teamMates" },
          { source: "IOT POC", target: "Shashank", type: "teamMates" },


          { source: "Managers", target: "Mallikarjuna", type: "Manager" },
          { source: "Managers", target: "Rajesh Ranjan", type: "Manager" },
          { source: "Managers", target: "Datta", type: "Manager" },
          { source: "Mallikarjuna", target: "Srikanth", type: "Manager" },

          { source: "Projects", target: "IOT POC", type: "Practice" },
          { source: "Projects", target: "Woohoo", type: "Practice" },

          //{ source: "Sravan", target: "Managers", type: "Practice" },
          //{ source: "Sravan", target: "Projects", type: "Practice" },
          //{ source: "Sravan", target: "My Cubicle", type: "Practice" },

          //{ source: "My Cubicle", target: "Murali", type: "Practice" },
          //{ source: "My Cubicle", target: "Sandeep", type: "Practice" },
          //{ source: "My Cubicle", target: "Karthi", type: "Practice" },
          //{ source: "My Cubicle", target: "Ashish", type: "Practice" },
          //{ source: "My Cubicle", target: "Prem", type: "Practice" },
          //{ source: "My Cubicle", target: "Sandeep", type: "Practice" },
          //{ source: "My Cubicle", target: "Prashanth", type: "Practice" },
          //{ source: "My Cubicle", target: "Mahesh", type: "Practice" }

        ];

        var nodes = {};

        // Compute the distinct nodes from the links.
        links.forEach(function (link) {
            link.source = nodes[link.source] || (nodes[link.source] = { name: link.source });
            link.target = nodes[link.target] || (nodes[link.target] = { name: link.target });
        });

        var width = 960,
            height = 500;

        var force = d3.layout.force()
            .nodes(d3.values(nodes))
            .links(links)
            .size([width, height])
            .linkDistance(60)
            .charge(-300)
            .on("tick", tick)
            .start();

        var svg = d3.select("#chart").append("svg")
            .attr("width", width)
            .attr("height", height);

        // Per-type markers, as they don't inherit styles.
        svg.append("defs").selectAll("marker")
            .data(["teamMates", "Practice", "Manager"])
          .enter().append("marker")
            .attr("id", function (d) { return d; })
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 15)
            .attr("refY", -1.5)
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("orient", "auto")
          .append("path")
            .attr("d", "M0,-5L10,0L0,5");

        var path = svg.append("g").selectAll("path")
            .data(force.links())
          .enter().append("path")
            .attr("class", function (d) { return "link " + d.type; })
            .attr("marker-end", function (d) { return "url(#" + d.type + ")"; });

        var circle = svg.append("g").selectAll("circle")
            .data(force.nodes())
          .enter().append("circle")
            .attr("r", 6)
            .call(force.drag);

        var text = svg.append("g").selectAll("text")
            .data(force.nodes())
          .enter().append("text")
            .attr("x", 8)
            .attr("y", ".31em")
            .text(function (d) { return d.name; });

        // Use elliptical arc path segments to doubly-encode directionality.
        function tick() {
            path.attr("d", linkArc);
            circle.attr("transform", transform);
            text.attr("transform", transform);
        }

        function linkArc(d) {
            var dx = d.target.x - d.source.x,
                dy = d.target.y - d.source.y,
                dr = Math.sqrt(dx * dx + dy * dy);
            return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
        }

        function transform(d) {
            return "translate(" + d.x + "," + d.y + ")";
        }

    </script>



</body>